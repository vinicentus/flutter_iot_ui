import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_iot_ui/data/sqlite.dart';
import 'package:flutter_iot_ui/data/web3.dart';
import 'appbar_trailing.dart';
import 'drawer.dart';
import '../data/settings_constants.dart';

class SettingsPage extends StatefulWidget {
  static const String route = '/SettingsPage';
  final String title = 'Settings';

  @override
  _SettingsPageState createState() => _SettingsPageState();
}

class _SettingsPageState extends State<SettingsPage> {
  bool _usesWeb3() {
    switch (globalDBManager.runtimeType) {
      case SQLiteDatabaseManager:
        return false;
      case Web3Manager:
        return true;
      default:
        throw Exception('DBManager type not recognized!');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
        actions: [AppbarTrailingInfo()],
      ),
      drawer: NavDrawer(SettingsPage.route),
      body: ListView(
        children: [
          // This could also be a CheckboxListTile
          SwitchListTile(
            title: Text(
                'Subtract smaller particle size ranges from the bigger ones?'),
            subtitle: Text(
                '''Show particle sizes in separate ranges instead of beginning all ranges from 0.3µm.
This applies to the Mass Concentration and Number Concentration graphs
Example:  2.5-4.0µm, instead of 0.3-4.0µm.
This output is generated by subtracting the smaller particle size ranges from the bigger ones.
'''),
            value: subtractParticleSizes,
            onChanged: (value) {
              setState(() {
                subtractParticleSizes = value;
              });
            },
          ),
          SwitchListTile(
            title: Text('Use moving average?'),
            subtitle: Text(
                'Forces the graphs to take a moving average with a time period of 10 minutes. This essentially smooths out the graph.'),
            value: useMovingAverage,
            onChanged: (value) {
              setState(() {
                useMovingAverage = value;
              });
            },
          ),
          Column(
            children: [
              ListTile(
                title: Text(
                    'Set the number of samples per moving average point on the graph.'),
                subtitle: Text(
                    '''We currently get samples roughly every minute, so a value of 10 would mean that the averages are calculated over 10 minute periods.
Higher values mean smoother lines on the graph.'''),
              ),
              Slider(
                value: numberOfSamplesPerMovingAverageWindow.toDouble(),
                min: 10,
                max: 60,
                divisions: 5,
                label: numberOfSamplesPerMovingAverageWindow.round().toString(),
                onChanged: (double value) {
                  setState(() {
                    numberOfSamplesPerMovingAverageWindow = value.toInt();
                  });
                },
              ),
            ],
          ),
          SwitchListTile(
            title: Text('Get data over web3?'),
            value: _usesWeb3(),
            onChanged: (value) => {
              setState(() {
                if (value) {
                  globalDBManager = Web3Manager();
                } else {
                  globalDBManager = SQLiteDatabaseManager();
                }
              })
            },
          ),
          Column(
            children: [
              ListTile(
                title: Text(
                    'Set the number of seconds to wait between graph data fetch.'),
                subtitle: Text(
                    'This controls how often the app fetches new data to display.'),
              ),
              Slider(
                value: numberOfSecondsBetweenGraphRefresh.toDouble(),
                min: 10,
                max: 120,
                divisions: 11,
                label: '${numberOfSecondsBetweenGraphRefresh.round()}s',
                onChanged: (double value) {
                  setState(() {
                    numberOfSecondsBetweenGraphRefresh = value.toInt();
                  });
                },
              ),
            ],
          ),
        ],
      ),
    );
  }
}
